                COMP 40 Lab: Points, lines, and planes
                         (for groups of four)



+--------------------------------------------------------+
|Keeper of the record: Michael Tran                      |
|--------------------------------------------------------|
| Other group members: Raphael Osorio, Param Chopra, Ryan Havens
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+

You'll have about 40 minutes to answer the 11 questions below.
(Some questions are repetitive.)

The keeper of the record should fill in answers, submit, and mail
the submission to everyone in the group.

Part I: POINTS

  1. Using mathematics or metaphor, explain what a program variable
     stands for.  Your explanation should live in the world of ideas.
     You may find it helpful to think of a particular example:

        int x;
        x = 9;
        x = x + 10;

     What kind of a thing does 'x' stand for?

        Some integer quantity without specified units


  2. Is a ``variable'' a polymorphic idea?  If so, where's the polymorphism?
     If not, why not?

        A variable is a space in memory which can represent any type of any 
        size. It depends on how you choose to use and interpret it.


  3. Using mathematics or metaphor, explain what a pointer stands for.
     Your explanation should live in the world of ideas.  You may find
     it helpful to think of a particular example:

        int *p;
        p = malloc(sizeof(*p));
        assert(p != NULL);
        *p = 9;
        *p = *p + 10;

     What kind of a thing does '*p' stand for?
        
        A pointer represents something like an address to a house.  The content
        of the house can change, the size of the house can change, but the 
        address always represents the same house. 

  4. Is a ``pointer'' a polymorphic idea?  If so, where's the
     polymorphism?  If not, why not?

        The address could be eventually after some time change to not be ahouse
        anymore.  People could destroy the house and rebuild a factory or pet 
        store in its place.  Freeing the pointer would be the equivalent like
        just destroying the road the house was on. It is polymorphic.


Part II: LINES

  5. What, in the world of ideas, is an array?  (Don't forget
     parametric polymorphism:  How many type parameters are there and
     what do they stand for?  Is an array parametric in anything
     else?)

        Its like a residential street with multiple houses on the same street.
        The street stores the collection of houses for easy/ordered access 
        by functions( contractors ) so the world can act on it however they 
        choose once they have the address.


  6. You identify a variable by its name.  Array elements have no
     names.  How do you identify an element of an array?

        By its location, address, by the pointer which designates the variable
        The index dereferences.

  7. In the world of code, what would be a good representation of a
     single array element?  Can you use your answers to the questions
     above to argue your case?

        A single continuous block of memory

  8. Given your answer to question 7, supposing you wanted to treat
     'array' as an abstract data type, what operations would you want
     to provide on single array elements?  What prototypes would the
     functions representing those operations have?  That is, what would
     the functions take as arguments and return as results?

        set ( sell the house )
        get ( find out who lives there )
        free ( eviction ) 

Part III: PLANES

  9. What, in the world of ideas, is a two-dimensional array?

Every array allows for exactly one level of organization. Thus, creating
a 2d array gives you a way to organize by two levels of filtering.


 10. How do you identify an element of a two-dimensional array?
You first provide information pertinent to the first level, then identify
this element by giving information on the second level.



PART IV: FROM LINES TO PLANES

 11. In your new homework assignment, you are asked to design and
     implement abstractions for two-dimensional arrays.  We are asking
     you not to implement two-dimensional arrays on the bare metal but
     rather to use a tool provided by Dave Hanson: the one-dimensional
     array.  The elements of the two-dimensional arrays should be set
     in one-to-one correspondence with elements of one or more
     one-dimensional arrays.

     The key question is this:

        - How do you relate each element in a two-dimensional array to
          a corresponding element in some one-dimensional array?

     A useful answer will probably contain a mix of C expressions and
     mathematics, or perhaps all mathematics.  Once you get a useful
     answer, and you can convince a skeptical listener that you have
     truly established a one-to-one correspondence, the rest of the
     design and implementation are easy.  (Your instructor knows of
     two useful answers based on two different implementation
     strategies.)

     How do you relate each element in a two-dimensional array to one
     and only one corresponding element in some one-dimensional array?


        If you had a group where everyone had some different combination of 
        eye and hair color.  To find a person with blue eyes and brown hair
        ( 2d array ) you could just go into the one d array of brown haired 
        people and just find the blue eyed person
