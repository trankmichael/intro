#include <iostream>
#include <fstream>
#include <cstdlib>

using namespace std;

#include "hall.h"

// Purpose: constructor
// Arguments: n/a
// Returns: n/a
// Effects: changes multiple values
//	    in the struct
Hall::Hall()
{    
    initialSeatId();
    initialBlankName();
    initialSeatPrices();
    initialSeatRevenue();
        
}
// Purpose: handles the request option
// Arguments: name, partysize, price range, day as an int
// Returns: a bool to main which determines whether or not
//	    it was successfuls
// Effects: assigns names and revenues. changes multiple values
//	    in the struct
bool Hall::request(string name, int num, string type, int day)
{
  
  bool found = true;  // if found is true seats were  found
  
  if( checkAlreadyReserved( name ) ){
	found = false;
  }
  else {
	found = findSpace(name, num, type, day);
  }
  return found; 
  
}

// ------------------------------------------------
// Purpose: checks if the name already has a
//  	    reservation
// Arguments: the string 'name' being looked for
// Returns: bool if there is already the name in the
//	    array
// Effects: does not change any value in the array
// ------------------------------------------------
bool Hall::checkAlreadyReserved( string name )
{  
    bool check = false;  
    
    
    for ( int posR = 0; posR < totalRows; posR++ ){
	
	for( int posC = 0; posC < totalCols; posC++ ){				
	    
	    if ( chart[posR][posC].name == name ){
		posR = exitLoop;
		posC = exitLoop;
		check = true;
	    }
	}    
	
    }
    return check;
    
}

// ------------------------------------------------
// Purpose: after 'RQ' has been inputted, calls one
// 	    of three different functions depending
// 	    on the price range
// Arguments: the string / the day as an int
//	      name of the party asking for a 
//	      reservation / int number of people in
//	      party / string price range
// Returns: n/a
// Effects: does not change any values in the array
// ------------------------------------------------

bool Hall::findSpace(string name, int partySize, string price, int day)
{
    bool found;
    
    if (  price == "hi" ){
	found = findHiSeats( name, partySize, day ); 
    }
    if (  price == "lo" ){
	found = findLoSeats1( name, partySize, day ); 
    }
    if (  price == "any" ){
	found = findAnySeats( name, partySize, day ); 
    }
    
    return found;
}

// ------------------------------------------------
// Purpose: searches through all the seats to find
//          adjacent seats and assign them a name
// Arguments: - the name of the party -the day
//	      - the number of people in the party
// Returns: bool depending if seats are found
// Effects: when a set of adjacent seats are found
//	    it assigns the name to each of those 
//	    seats
// Notes: functions by going through each space in 
//        the array from left to right, then down
//	  the rows - at each space it checks if 
//        there are the correct number of open seats
//	  next to it
//	  -- if no adjacent seats are found calls
//	     another function for seperate seats
//	  -- if adjacent seats are found calls a func
//           to assign seats then another to print the 
//	     confirmation
// ------------------------------------------------
bool Hall::findAnySeats( string name, int partySize, int day )
{
    int count;
    int openAdjacentSeats;
    bool adjacent = false, found = true;
    string price = "any";
    for( int posR = 0; posR < totalRows; posR++ ){
	for( int posC = 0; posC <= totalCols - partySize; posC++ ){
	    count = 0;
	    openAdjacentSeats = 0;
	    for ( int posCheck = posC; count < partySize; posCheck++){
		if ( chart[posR][posCheck].name == blankId ){
		    openAdjacentSeats++;
		}
		if ( openAdjacentSeats == partySize ){
		    adjacent = true;
		    assignSeat( name, partySize, posC , posR);
		    printParty( name, price, partySize, adjacent, day );
		    posR = totalRows;
		    count = exitLoop;
		    posC = totalCols;
		}
		count++;
	    }
	}
    }
    
    if ( !adjacent ){
	found = seperateAnySeats( name, partySize, day );
    }
    return found;
}

// ------------------------------------------------
// Purpose: if adjacent seats are not found then 
//	    looks for seperate seats of any price
// Arguments:- party name - partysize -
// Returns: bool depending on if seats are found
// Effects: assigns new names in the array if possible
// Notes:   -Calls print party if possible - if not prints 
//          not available
// ------------------------------------------------
bool Hall::seperateAnySeats( string name, int partySize, int day)
{
    int count = 0;
    bool adjacent = false, found = true;
    string price = "any";
    for ( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols; posC++ ){
	    
	    if( chart[posR][posC].name == blankId ){
		chart[posR][posC].name = name;
		count++;
	    }
	    if( count == partySize ){
		printParty( name, price, partySize, adjacent, day );
		posC = totalCols;
		posR = totalRows;
	    }
	    else if ( (posR == totalRows - 1) && ( posC == totalCols - 1 ) ){
		cancel( name );
		found = false;
	    }
	}
    }   
    return found;    
}

// ------------------------------------------------
// Purpose: searches through the hi priced seats for
//          adjacent hi Seats row 0-7 col 4-15
// Arguments: - the name of the party -the day
//	      - the number of people in the party
// Returns: bool depending if seats are found
// Effects: when a set of adjacent seats are found
//	    it assigns the name to each of those 
//	    seats
// Notes: functions by going through each space in 
//        the array from left to right, then down
//	  the rows - at each space it checks if 
//        there are the correct number of open seats
//	  next to it
//	  -- if no adjacent seats are found calls
//	     another function for seperate seats
//	  -- if adjacent seats are found calls a func
//           to assign seats then another to print the 
//	     confirmation
// ------------------------------------------------

bool Hall::findHiSeats( string name, int partySize, int day )
{
    int count, openAdjacentSeats;
    bool adjacent = false, found = true;
    string price = "hi";
    
    for ( int posR = 0; posR <= lastHiRow ; posR++ ){    
	for ( int posC = firstHiCol; posC <= lastHiCol - (partySize-1); posC++ ){
	    count = 0;
	    openAdjacentSeats = 0; 
	    for ( int posCheck = posC; count < partySize; posCheck++){
		if ( chart[posR][posCheck].name == blankId ){
		    openAdjacentSeats++;   
		}
		if ( openAdjacentSeats == partySize ){
		    adjacent = true;
		    assignSeat( name, partySize, posC , posR);
		    printParty( name, price, partySize, adjacent, day );
		    return true;
		    posR = lastHiRow + 1;
		    count = exitLoop;
		    posC = lastHiCol;
		}
		count++; 
	    }
	}
    }  
    if ( !adjacent ){
	found = seperateSeats( name, partySize, price, day ); 
    }
    return found; 
}

// ------------------------------------------------
// Purpose: searches through the first set of 
//          lo priced seats for adjacent seating
//	    rows 0-7 and columns 0-3
// Arguments: -the day - the name of the party
//	      - the number of people in the party
// Returns: bool depending if seats are found
// Effects: when a set of adjacent seats are found
//	    it assigns the name to each of those 
//	    seats
// Notes: functions by going through each space in 
//        the array from left to right, then down
//	  the rows - at each space it checks if 
//        there are the correct number of open seats
//	  next to it
//	  -- if no adjacent seats are found calls
//	     another function for seperate seats
//	  -- if adjacent seats are found calls a func
//           to assign seats then another to print the 
//	     confirmation
// ------------------------------------------------
bool Hall::findLoSeats1( string name, int partySize, int day )
{
    int count, openAdjacentSeats;
    bool adjacent = false, found = true;
    string price = "lo";    
    for ( int posR = 0; posR <= lastHiRow ; posR++ ){	
	for ( int posC = 0; posC <= lastLoCol - (partySize - 1); posC++ ){	    
	    count = 0;		 	//number of seats right of posCheck 
	    openAdjacentSeats = 0; 	//counts the amount of open seats     
	    for ( int posCheck = posC; count < partySize; posCheck++){
		if ( chart[posR][posCheck].name == blankId ){    
		openAdjacentSeats++;  	    
		}
		if ( openAdjacentSeats == partySize ){
		    adjacent = true;
		    assignSeat( name, partySize, posC , posR);
		    printParty( name, price, partySize, adjacent, day);
		    posR = exitLoop;
		    count = exitLoop; 	
		    posC = exitLoop; 
		}		
		count++;       //exits and moves to the next posC when it has
	    }	      	       //counted up partySize number of times and there 
	}		       // are not partySize amount of openseats
    }    
    if ( !adjacent ){
	found = findLoSeats2( name, partySize, day ); 
    }
    return found;
}

// ------------------------------------------------
// Purpose: searches through the second set of 
//          lo priced seats for adjacent seating
//	    rows 0-7 and columns 16-19
// Arguments: -the day - the name of the party
//	      - the number of people in the party
// Returns: bool depnding if seats are found 
// Effects: when a set of adjacent seats are found
//	    it assigns the name to each of those 
//	    seats
// Notes: functions by going through each space in 
//        the array from left to right, then down
//	  the rows - at each space it checks if 
//        there are the correct number of open seats
//	  next to it
//	  -- if no adjacent seats are found calls
//	     another function for seperate seats
//	  -- if adjacent seats are found calls a func
//           to assign seats then another to print the 
//	     confirmation
// ------------------------------------------------
bool Hall::findLoSeats2( string name, int partySize, int day )
{
    int count, openAdjacentSeats;
    bool adjacent = false, found = true;
    string price = "lo";
    for ( int posR = 0; posR <= lastHiRow ; posR++ ){	
	for ( int posC = firstLoCol; posC <= totalCols - (partySize); posC++ ){	    
	    count = 0;
	    openAdjacentSeats = 0;	    
	    for ( int posCheck = posC; count < partySize; posCheck++){		
		if ( chart[posR][posCheck].name == blankId ){
		    
		    openAdjacentSeats++;   
		    
		}
		if ( openAdjacentSeats == partySize ){
		    adjacent = true;
		    assignSeat( name, partySize, posC , posR);
		    printParty( name, price, partySize, adjacent, day );
		    posR = exitLoop;
		    count = exitLoop;
		    posC = exitLoop; 
		}		
		count++; 
	    }
	}
    }   
    if ( !adjacent ){
	found = findLoSeats3( name, partySize, day ); 
    }    
    return found;    
}

// ------------------------------------------------
// Purpose: searches through the third set of 
//          lo priced seats for adjacent seating
//	    rows 7-14 and columns 0-19
// Arguments: - the day - the name of the party
//	      - the number of people in the party
// Returns: bool depending if seats are found
// Effects: when a set of adjacent seats are found
//	    it assigns the name to each of those 
//	    seats
// Notes: functions by going through each space in 
//        the array from left to right, then down
//	  the rows - at each space it checks if 
//        there are the correct number of open seats
//	  next to it
//	  -- if no adjacent seats are found calls
//	     another function for seperate seats
//	  -- if adjacent seats are found calls a func
//           to assign seats then another to print the 
//	     confirmation
// ------------------------------------------------

bool Hall::findLoSeats3( string name, int partySize, int day )
{
    int count;
    int openAdjacentSeats;
    bool adjacent = false, found = true;
    string price = "lo";
    for ( int posR = lastHiRow; posR < totalRows; posR++ ){	    
	for ( int posC = 0; posC <= totalCols - (partySize); posC++ ){		
	    count = 0;
	    openAdjacentSeats = 0;		
	    for ( int posCheck = posC; count < partySize; posCheck++){		    
		if ( chart[posR][posCheck].name == blankId ){			
		    openAdjacentSeats++;   			
		}
		if ( openAdjacentSeats == partySize ){
		    adjacent = true;
		    assignSeat( name, partySize, posC , posR);
		    printParty( name, price, partySize, adjacent, day);           
		    posR = exitLoop;
		    count = exitLoop;
		    posC = exitLoop; 
		}		    
		count++; 
	    }
	}
    }		
    if ( !adjacent ){
	   found = seperateSeats( name, partySize, price, day ); 
    }
    return found; 
}
// ------------------------------------------------
// Purpose: if adjacent seats are not found then 
//	    looks for seperate seats
// Arguments: the day - party name - partysize -
//	      price range
// Returns: n/a
// Effects: assigns new names in the array if possible
// Notes:   -Calls print party if possible - if not prints 
//          not available
// ------------------------------------------------
bool Hall::seperateSeats( string name, int partySize, string price, int day)
{ 
    int count = 0;
    bool adjacent = false, found = true;
    
    for( int posR = 0; posR < totalRows ; posR++ ){
	for ( int posC = 0; posC < totalCols; posC++ ){
	    
	    if( ( chart[posR][posC].name == blankId ) && 
		( chart[posR][posC].price == price ) ) 
	    {
		chart[posR][posC].name = name;
		count++;
	    }
	    if ( count == partySize ){
		printParty( name, price, partySize, adjacent, day );
		posC = exitLoop;
		posR = exitLoop;
	    }
	    else if ( (posR == totalRows - 1) && ( posC == totalCols - 1 ) ){
		cancel( name );
		found = false;
	    }
	}
    }
    
    return found;
    
}

// ------------------------------------------------
// Purpose: assigns names to seats
// Arguments: 2d array - the name of the party
//	      - the first open seat found by
//	      a function that called it (posC & posR)
// Returns: n/a
// Effects: assigns a name to the seats
// ------------------------------------------------
void Hall::assignSeat( string name, int partySize, int posC, int posR)
{
    for( int i = 0; i < partySize; i++ ){
	chart[posR][posC].name = name ;
	posC++;
    }
}

// ------------------------------------------------
// Purpose: prints out a confirmation message for 
//	    a party reservation - also assigns 
//          a revenue value to the first seat in
//	    the party
// Arguments: the day, a party name, a 
//	      party price range (string), and a
//	      bool to represent if adjacent seating
//	      was possible
// Returns: n/a
// Effects: couts values - calls a function to set 
// 	    the .rev space in the struct for each 
//	    name
// ------------------------------------------------
void Hall::printParty( string name, string price, int partySize, 
		       bool adjacent, int day)
{
	double revenue;
		    
	revenue = partyRevenue( partySize, name, price );
	if ( !adjacent ){
	    revenue = revenue * discount;
	}
	cout << "    OK " << name << " " << revenue << " "; 
	cout << partySize << " " << day << " ";
	for( int posR = 0; posR < totalRows; posR++ ){
			
		for ( int posC = 0; posC < totalCols ; posC++ ){
		    if ( name == chart[posR][posC].name ){
			cout << chart[posR][posC].row << chart[posR][posC].col;
			cout << " ";
		    }
		}  	
	}   
	for(int posR = 0; posR < totalRows; posR++){
			
		for (int posC = 0; posC < totalCols ; posC++){
		    if ( name == chart[posR][posC].name ){
			chart[posR][posC].rev = revenue;
			posC = posR = exitLoop;
		    }
		}
	}
	cout << endl;
}

// ------------------------------------------------
// Purpose: calculates the additional revenue from
//	    a group seated in the seats
// Arguments: 2d array - name being looked for
//	      - the string party price - int
//	      how many people are in the group 
// Returns: double - revenue
// Effects: calls a seperate function to handle any
// ------------------------------------------------
double Hall::partyRevenue( int partySize, string name, string price )
{ 
	double revenue;
			 
	 if ( price == "lo" ){
	     revenue = partySize * 150;
	 }
	 else if ( price == "hi" ){
	     revenue = partySize * 200;
	 }
	 else if ( price == "any" ){
	     revenue = anyRevenue( name);
	 }
		 
	 return revenue; 
		 
}

// ------------------------------------------------
// Purpose: calculates the additional revenue from
//	    a group seated in any priced seats
// Arguments:  - name being looked for
// Returns: double - revenue
// Effects: does not change anything in the array
// ------------------------------------------------
double Hall::anyRevenue(string name)
{
    double revenue = 0;
    
    for ( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols; posC++ ){
	    
	    if( chart[posR][posC].name == name ){
		if( chart[posR][posC].price == "hi")
		{
		    revenue = revenue + hiPrice;
		}
		if( chart[posR][posC].price == "lo")
		{
		    revenue = revenue + loPrice;
		}
	    }
	}
    }
    
    return revenue;
    
}

// ------------------------------------------------
// Purpose: handles the "CA" input and takes in a
//	    name
// Arguments:the name being cancelled
// Returns: n/a
// Effects: replaces all instances of the name
//  	    inputted with the blank id "---"
//          and couts a confirmation statement
//	    changes revenue to zero
// ------------------------------------------------
bool Hall::cancel(string name)
{
    bool req = false; 
    
    for ( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols; posC++ ){
	    
	    if ( chart[posR][posC].name == name ){
		req = true;
		chart[posR][posC].name = blankId;
		chart[posR][posC].rev = 0;
	    }
	}
    }
  
    return req;
}

// ------------------------------------------------
// Purpose: prints out the current .name values in
//          in the struct for all spaces in the 
//	    array --- prints out the total revenue
// Arguments: the 2d seat array of structs
// Returns: n/a
// Effects: does not change any values in the array
// ------------------------------------------------
void Hall::print()
{
    for ( int posR = 0; posR < totalRows; posR++ ){
	
	cout << "    "; 
	
	for( int posC = 0; posC < totalCols; posC++ ){
	    cout << chart[posR][posC].name << " ";
	    
	}
	cout << endl; 
    }
    
    cout << "Revenue: ";
    cout <<  totalRevenue() << ".00"<< endl;  
  
}

// ------------------------------------------------
// Purpose: calculates the total revenue of the 
//	    whole concert hall 
// Arguments: the 2d seat array of structs
// Returns: returns the total revenue
// Effects: does not change any values in the array
// ------------------------------------------------
double Hall::totalRevenue()
{
    double revenue = 0;
    
    for ( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols; posC++ ){
	    
	    revenue = revenue + chart[posR][posC].rev;
	    
	}
    }
    return revenue;
}

// ------------------------------------------------
// Purpose: initializes each individual seat name 
//	    ex: b4
// Arugments: n/a
// Returns: n/a
// Effects: gives each space in the array a row number
//	    { a , b, c, d ... , n } and an int for its
//          colun number { 1, 2, 3 ... 20}
// ------------------------------------------------
void Hall::initialSeatId( )
{
    int col = 1;
    char row = 'a';
    
    for( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols ; posC++ ){
	    chart[posR][posC].col = col;
	    chart[posR][posC].row = row;
	    col++;
	}
	col = 1; 
	row++;
    } 
    
}

// ------------------------------------------------
// Purpose: initializes a name for each blank seat
// Arguments: n/a
// Returns: n/a
// Effects: gives each .name space in the array the 
//	    blank initializer "---"
// ------------------------------------------------
void Hall::initialBlankName( )
{   
    for( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols ; posC++ ){
	    chart[posR][posC].name = blankId;
	}
	
    } 
    
}

// ------------------------------------------------
// Purpose: initializes all the seat .rev to 0 
// Arguments: n/a 
// Returns: n/a
// Effects: all the .rev spaces in the struct will 
//          have zero
// ------------------------------------------------
void Hall::initialSeatRevenue( )
{
    for( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols; posC++ ){
	    chart[posR][posC].rev = 0;
	}
    }
}

// ------------------------------------------------ 
// Purpose: initializes the prices for each seat
// Arguments: n/a
// Returns: n/a
// Effects: gives each .price space in the array
//	    "hi" or "lo" 
// ------------------------------------------------
void Hall::initialSeatPrices( )
{
    
    
    for( int posR = 0; posR < totalRows; posR++ ){
	
	for ( int posC = 0; posC < totalCols ; posC++ ){
	    
	    if ( (posC >= firstHiCol) && (posC <= lastHiCol) && (posR <= lastHiRow) )
	    {    
		chart[posR][posC].price = "hi";
	    }
	    else{
		chart[posR][posC].price = "lo";
	    }
	}
	
    } 
    
}



